<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SunMonkey</title>
  
  
  <link href="https://brraida.github.io/atom.xml" rel="self"/>
  
  <link href="https://brraida.github.io/"/>
  <updated>2021-09-03T13:30:10.809Z</updated>
  <id>https://brraida.github.io/</id>
  
  <author>
    <name>Brraida Hu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test_7</title>
    <link href="https://brraida.github.io/posts/df4f3d23/"/>
    <id>https://brraida.github.io/posts/df4f3d23/</id>
    <published>2021-09-03T13:29:31.000Z</published>
    <updated>2021-09-03T13:30:10.809Z</updated>
    
    <content type="html"><![CDATA[<p>test sfsdfsaf hjgjejgoi eoeoi</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test_6</title>
    <link href="https://brraida.github.io/posts/a8480db5/"/>
    <id>https://brraida.github.io/posts/a8480db5/</id>
    <published>2021-09-02T14:26:08.000Z</published>
    <updated>2021-09-02T14:27:15.726Z</updated>
    
    <content type="html"><![CDATA[<p>在_config.yml文件中,在Extensions中添加配置（便于管理）。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Feed Atom</span><br><span class="hljs-attr">feed:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">atom</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">atom.xml</span><br>  <span class="hljs-attr">limit:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">hub:</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">content_limit:</span> <br>  <span class="hljs-attr">content_limit_delim:</span> <br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span><br>  <span class="hljs-attr">icon:</span> <br>  <span class="hljs-attr">autodiscovery:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">template:</span><br></code></pre></div></td></tr></table></figure><p>​    运行<code>hexo clean &amp;&amp; hexo g</code>，即可在根目录下看到public文件夹，在public文件夹下有atom.xml则制作成功。    在自己的博客主页地址后面加**/atom.xml**，即可看源信息。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>优化url</title>
    <link href="https://brraida.github.io/posts/7d2eca9c/"/>
    <id>https://brraida.github.io/posts/7d2eca9c/</id>
    <published>2021-09-02T05:54:37.000Z</published>
    <updated>2021-09-02T05:59:36.830Z</updated>
    
    <content type="html"><![CDATA[<p>使url看得更顺眼，但要使用插件，这可能一定程度上使网页加载速度变慢。</p><p>使用<code>hexo-abbrlink</code>插件</p><blockquote><p>官方的安装与配置</p><p><a href="https://github.com/rozbo/hexo-abbrlink">rozbo/hexo-abbrlink: create one and only link for every post for hexo (github.com)</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="hexo" scheme="https://brraida.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>制作hexo博客的rss源</title>
    <link href="https://brraida.github.io/posts/d56f63a7/"/>
    <id>https://brraida.github.io/posts/d56f63a7/</id>
    <published>2021-09-02T03:49:52.000Z</published>
    <updated>2021-09-02T05:52:45.735Z</updated>
    
    <content type="html"><![CDATA[<p>为自己的hexo博客制作rss源。</p><p>使用的是hexo的<code>hexo-generator-feed</code>插件。</p><blockquote><p>官方文档与相关配置信息链接:</p><p><a href="https://github.com/hexojs/hexo-generator-feed">hexojs/hexo-generator-feed: Feed generator for Hexo. (github.com)</a></p></blockquote><p>在_config.yml文件中,在Extensions中添加配置（便于管理）。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Feed Atom</span><br><span class="hljs-attr">feed:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">atom</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">atom.xml</span><br>  <span class="hljs-attr">limit:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">hub:</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">content_limit:</span> <br>  <span class="hljs-attr">content_limit_delim:</span> <br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span><br>  <span class="hljs-attr">icon:</span> <br>  <span class="hljs-attr">autodiscovery:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">template:</span><br></code></pre></div></td></tr></table></figure><p>​    运行<code>hexo clean &amp;&amp; hexo g</code>，即可在根目录下看到public文件夹，在public文件夹下有atom.xml则制作成功。    在自己的博客主页地址后面加**/atom.xml**，即可看源信息。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="rss" scheme="https://brraida.github.io/tags/rss/"/>
    
    <category term="hexo" scheme="https://brraida.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>test_5</title>
    <link href="https://brraida.github.io/posts/31415c0f/"/>
    <id>https://brraida.github.io/posts/31415c0f/</id>
    <published>2021-09-02T03:11:15.000Z</published>
    <updated>2021-09-02T05:47:42.214Z</updated>
    
    <content type="html"><![CDATA[<p>李白白白</p><p>金樽清酒斗十千，玉盘珍羞直万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川，将登太行雪满山。<br>闲来垂钓碧溪上，忽复乘舟梦日边。<br>行路难！行路难！多歧路，今安在？<br>长风破浪会有时，直挂云帆济沧海。</p><p>金樽清酒斗十千，玉盘珍羞直万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川，将登太行雪满山。<br>闲来垂钓碧溪上，忽复乘舟梦日边。</p><p>行路难！行路难！多歧路，今安在？</p><p>长风破浪会有时，直挂云帆济沧海。</p><p>金樽清酒斗十千，玉盘珍羞直万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川，将登太行雪满山。<br>闲来垂钓碧溪上，忽复乘舟梦日边。<br>行路难！行路难！多歧路，今安在？<br>长风破浪会有时，直挂云帆济沧海。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test_4</title>
    <link href="https://brraida.github.io/posts/46466c99/"/>
    <id>https://brraida.github.io/posts/46466c99/</id>
    <published>2021-09-01T14:52:03.000Z</published>
    <updated>2021-09-02T05:47:42.211Z</updated>
    
    <content type="html"><![CDATA[<p>test</p><p>test</p><p>test</p><p>test</p><p>金樽清酒斗十千，玉盘珍羞直万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川，将登太行雪满山。<br>闲来垂钓碧溪上，忽复乘舟梦日边。<br>行路难！行路难！多歧路，今安在？<br>长风破浪会有时，直挂云帆济沧海。</p><p>金樽清酒斗十千，玉盘珍羞直万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川，将登太行雪满山。<br>闲来垂钓碧溪上，忽复乘舟梦日边。</p><p>行路难！行路难！多歧路，今安在？</p><p>长风破浪会有时，直挂云帆济沧海。</p><p>金樽清酒斗十千，玉盘珍羞直万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川，将登太行雪满山。<br>闲来垂钓碧溪上，忽复乘舟梦日边。<br>行路难！行路难！多歧路，今安在？<br>长风破浪会有时，直挂云帆济沧海。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test_3</title>
    <link href="https://brraida.github.io/posts/d822f93a/"/>
    <id>https://brraida.github.io/posts/d822f93a/</id>
    <published>2021-09-01T13:17:48.000Z</published>
    <updated>2021-09-02T05:47:42.205Z</updated>
    
    <content type="html"><![CDATA[<p>test</p><p>test</p><p>test</p><p>test</p><p>金樽清酒斗十千，玉盘珍羞直万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川，将登太行雪满山。<br>闲来垂钓碧溪上，忽复乘舟梦日边。<br>行路难！行路难！多歧路，今安在？<br>长风破浪会有时，直挂云帆济沧海。</p><p>金樽清酒斗十千，玉盘珍羞直万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川，将登太行雪满山。<br>闲来垂钓碧溪上，忽复乘舟梦日边。<br>行路难！行路难！多歧路，今安在？<br>长风破浪会有时，直挂云帆济沧海。</p><p>金樽清酒斗十千，玉盘珍羞直万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川，将登太行雪满山。<br>闲来垂钓碧溪上，忽复乘舟梦日边。<br>行路难！行路难！多歧路，今安在？<br>长风破浪会有时，直挂云帆济沧海。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test_2</title>
    <link href="https://brraida.github.io/posts/af25c9ac/"/>
    <id>https://brraida.github.io/posts/af25c9ac/</id>
    <published>2021-09-01T13:10:01.000Z</published>
    <updated>2021-09-02T05:47:42.208Z</updated>
    
    <content type="html"><![CDATA[<p>test</p><p>test</p><p>test</p><p>test</p><p>金樽清酒斗十千，玉盘珍羞直万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川，将登太行雪满山。<br>闲来垂钓碧溪上，忽复乘舟梦日边。<br>行路难！行路难！多歧路，今安在？<br>长风破浪会有时，直挂云帆济沧海。</p><p>金樽清酒斗十千，玉盘珍羞直万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川，将登太行雪满山。<br>闲来垂钓碧溪上，忽复乘舟梦日边。<br>行路难！行路难！多歧路，今安在？<br>长风破浪会有时，直挂云帆济沧海。</p><p>金樽清酒斗十千，玉盘珍羞直万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川，将登太行雪满山。<br>闲来垂钓碧溪上，忽复乘舟梦日边。<br>行路难！行路难！多歧路，今安在？<br>长风破浪会有时，直挂云帆济沧海。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test_1</title>
    <link href="https://brraida.github.io/posts/362c9816/"/>
    <id>https://brraida.github.io/posts/362c9816/</id>
    <published>2021-09-01T12:20:18.000Z</published>
    <updated>2021-09-02T05:47:42.207Z</updated>
    
    <content type="html"><![CDATA[<p>hello</p><p>can u  get the message</p><p>金樽清酒斗十千，玉盘珍羞直万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川，将登太行雪满山。<br>闲来垂钓碧溪上，忽复乘舟梦日边。<br>行路难！行路难！多歧路，今安在？<br>长风破浪会有时，直挂云帆济沧海。</p><p>金樽清酒斗十千，玉盘珍羞直万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川，将登太行雪满山。<br>闲来垂钓碧溪上，忽复乘舟梦日边。<br>行路难！行路难！多歧路，今安在？<br>长风破浪会有时，直挂云帆济沧海。</p><p>金樽清酒斗十千，玉盘珍羞直万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川，将登太行雪满山。<br>闲来垂钓碧溪上，忽复乘舟梦日边。<br>行路难！行路难！多歧路，今安在？<br>长风破浪会有时，直挂云帆济沧海。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test12</title>
    <link href="https://brraida.github.io/posts/545b8f85/"/>
    <id>https://brraida.github.io/posts/545b8f85/</id>
    <published>2021-09-01T11:15:05.000Z</published>
    <updated>2021-09-02T05:47:42.218Z</updated>
    
    <content type="html"><![CDATA[<p>this is a test</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test_rss.md</title>
    <link href="https://brraida.github.io/posts/f56446b/"/>
    <id>https://brraida.github.io/posts/f56446b/</id>
    <published>2021-09-01T07:20:26.000Z</published>
    <updated>2021-09-02T05:47:42.216Z</updated>
    
    <content type="html"><![CDATA[<p> this is a test</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>右键新建Markdown文件</title>
    <link href="https://brraida.github.io/posts/dedab3/"/>
    <id>https://brraida.github.io/posts/dedab3/</id>
    <published>2021-08-31T16:00:00.000Z</published>
    <updated>2021-09-02T05:47:42.232Z</updated>
    
    <content type="html"><![CDATA[<p>新建一个<code>txt</code>文本，写入:</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx">Windows Registry Editor Version 5.00<br><br>[HKEY_CLASSES_ROOT\.md]<br>@=&quot;Typora.md&quot;<br>&quot;Content Type&quot;=&quot;text/markdown&quot;<br>&quot;PerceivedType&quot;=&quot;text&quot;<br><br>[HKEY_CLASSES_ROOT\.md\ShellNew]<br>&quot;NullFile&quot;=&quot;&quot;<br></code></pre></div></td></tr></table></figure><p>然后修改<code>.txt</code>后缀为  <code>.reg</code>的注册表文件。</p><p>双击运行。</p><p>参考链接:</p><p><a href="https://www.cnblogs.com/zhoujiayingvana/p/12357812.html">Typora添加右键新建Markdown文件 - 墨莲玦 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="Markdown" scheme="https://brraida.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://brraida.github.io/posts/4a17b156/"/>
    <id>https://brraida.github.io/posts/4a17b156/</id>
    <published>2021-08-14T09:04:08.230Z</published>
    <updated>2021-09-02T05:47:42.180Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ttrss</title>
    <link href="https://brraida.github.io/posts/b4463054/"/>
    <id>https://brraida.github.io/posts/b4463054/</id>
    <published>2021-08-02T01:05:54.000Z</published>
    <updated>2021-09-02T05:47:42.221Z</updated>
    
    <content type="html"><![CDATA[<p>​    第一次部署ttrss可能没有那么简单，需要耐点心。</p><p>​    我不用宝塔面板，环境都是自己搭的，所以会需要很多时间。用宝塔面板会比较简单(本来之后想搞宝塔面板的，但是我搭好了一些环境，而宝塔面板的官方文档说要“干净”的操作系统，由此作罢。)</p><blockquote><p><a href="https://www.bt.cn/bbs/thread-19376-1-1.html">宝塔Linux面板安装教程 - 2021年6月4日更新 - 7.6.0正式版 - Linux面板 - 宝塔面板论坛 (bt.cn)</a></p></blockquote><p>这位大佬就是用宝塔面板搞定的，还有<strong>视频教程</strong>，很nice。</p><blockquote><p><a href="https://blog.laoda.de/archives/tinytinyrss">【服务器能干什么】二十分钟搭建一个属于自己的RSS服务 - 二十五画生 (laoda.de)</a></p></blockquote><hr><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul><li><p>一台服务器 (我用的是腾讯云)</p></li><li><p>一个已经能解析的域名 (在这里用于隐藏端口和上ssl证书)</p></li><li><p>nginx (用于反向代理)</p></li><li><p>docker (下载镜像)</p></li><li><p>docker-compose (用于执行一堆docker指令)</p></li></ul><hr><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>  我也没有搞得很清楚，就谈谈我已知的。首先说明一点，可以不用域名，直接使用 <strong>IP:port</strong> 来进行访问，但是我记得ttrss有说，信息传输是不安全的，推荐上ssl。然后也看到诸多大佬教程都进行了https的配置。</p><p>  OK，言归正传。根据</p><blockquote><p><a href="https://cloud.tencent.com/document/product/243/19630#.E6.98.AF.E5.90.A6.E9.9C.80.E8.A6.81.E5.A4.87.E6.A1.88.E7.9A.84.E5.88.A4.E6.96.AD.E6.9D.A1.E4.BB.B6.E6.98.AF.E5.9F.9F.E5.90.8D.E8.BF.98.E6.98.AF-80-.E7.AB.AF.E5.8F.A3.EF.BC.9F">网站备案 是否需要备案 - 常见问题 - 文档中心 - 腾讯云 (tencent.com)</a></p></blockquote><p>中的<img src="/img/article/ttrss/%E5%9F%9F%E5%90%8D%E5%A4%87%E6%A1%88.png">这些信息，可知内陆服务器要进行web服务是需要备案的。所以我觉得如果搞个人网站的话，推荐香港服务器。</p><blockquote><p><a href="https://cloud.tencent.com/document/product/243/19633">网站备案 备案流程 - 常见问题 - 文档中心 - 腾讯云 (tencent.com)</a></p></blockquote><hr><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>官网安装教程:</p><blockquote><p><a href="https://nginx.org/en/linux_packages.html#RHEL-CentOS">nginx: Linux packages</a></p></blockquote><hr><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>docker安装教程</p><blockquote><p><a href="https://cloud.tencent.com/document/product/213/46000">云服务器 搭建 Docker - 最佳实践 - 文档中心 - 腾讯云 (tencent.com)</a></p></blockquote><hr><h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h3><p>docker-compose安装教程</p><blockquote><p><a href="https://docs.docker.com/compose/install/">Install Docker Compose | Docker Documentation</a></p></blockquote><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>ttrss官网教程</p><p><a href="https://ttrss.henry.wang/zh/">🐋 Awesome TTRSS | 🐋 Awesome TTRSS (henry.wang)</a></p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>下载[docker-compose.yml](<a href="https://github.com/HenryQW/Awesome-TTRSS/blob/main/docker-compose.yml">Awesome-TTRSS/docker-compose.yml at main · HenryQW/Awesome-TTRSS (github.com)</a>)到一目录下。</p><p>用网上教程命令不行，我也不懂git命令。然后就粗暴的在根目录下创建了ttrss文件夹，命令如下:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir ttrss<br>cd ttrss<br></code></pre></div></td></tr></table></figure><p>然后在Windows下创建一个docker-compose.yml ,将代码复制进去，然后使用<strong>xftp 7</strong>上传文件到linux的ttrss目录下。(解释一下为什么不直接在ttrss下创建docker-compose.yml，然后复制代码到docker-compose.yml中。首先yaml文件是对空格敏感的；其次，我复制的时候，shell自动将最后后面几行自动注释了。启动配置就失败了，改空格又麻烦，所以就直接用xftp 7了。)</p><p>docker-compose.yml文件配置:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">version: &quot;3&quot;<br>services:<br>  service.rss:<br>    image: wangqiru/ttrss:latest<br>    container_name: ttrss<br>    ports:<br>      - 181:80<br>    environment:<br>      - SELF_URL_PATH=http://localhost:181/ # please change to your own domain<br>      - DB_PASS=ttrss # use the same password defined in `database.postgres`<br>      - PUID=1000<br>      - PGID=1000<br>    volumes:<br>      - feed-icons:/var/www/feed-icons/<br>    networks:<br>      - public_access<br>      - service_only<br>      - database_only<br>    stdin_open: true<br>    tty: true<br>    restart: always<br><br>  service.mercury: # set Mercury Parser API endpoint to `service.mercury:3000` on TTRSS plugin setting page<br>    image: wangqiru/mercury-parser-api:latest<br>    container_name: mercury<br>    networks:<br>      - public_access<br>      - service_only<br>    restart: always<br><br>  service.opencc: # set OpenCC API endpoint to `service.opencc:3000` on TTRSS plugin setting page<br>    image: wangqiru/opencc-api-server:latest<br>    container_name: opencc<br>    environment:<br>      - NODE_ENV=production<br>    networks:<br>      - service_only<br>    restart: always<br><br>  database.postgres:<br>    image: postgres:13-alpine<br>    container_name: postgres<br>    environment:<br>      - POSTGRES_PASSWORD=ttrss # feel free to change the password<br>    volumes:<br>      - ~/postgres/data/:/var/lib/postgresql/data # persist postgres data to ~/postgres/data/ on the host<br>    networks:<br>      - database_only<br>    restart: always<br><span class="hljs-meta"></span><br><span class="hljs-meta">  #</span><span class="bash"> utility.watchtower:</span><br><span class="hljs-meta">  #</span><span class="bash">   container_name: watchtower</span><br><span class="hljs-meta">  #</span><span class="bash">   image: containrrr/watchtower:latest</span><br><span class="hljs-meta">  #</span><span class="bash">   volumes:</span><br><span class="hljs-meta">  #</span><span class="bash">     - /var/run/docker.sock:/var/run/docker.sock</span><br><span class="hljs-meta">  #</span><span class="bash">   environment:</span><br><span class="hljs-meta">  #</span><span class="bash">     - WATCHTOWER_CLEANUP=<span class="hljs-literal">true</span></span><br><span class="hljs-meta">  #</span><span class="bash">     - WATCHTOWER_POLL_INTERVAL=86400</span><br><span class="hljs-meta">  #</span><span class="bash">   restart: always</span><br><br>volumes:<br>  feed-icons:<br><br>networks:<br>  public_access: # Provide the access for ttrss UI<br>  service_only: # Provide the communication network between services only<br>    internal: true<br>  database_only: # Provide the communication between ttrss and database only<br>    internal: true<br></code></pre></div></td></tr></table></figure><p>主要修改的地方是第九行,将localhost改成ip地址，其他可以先不动。先激动的试试行不行。</p></li><li><p>启动</p><p>在ttrss目录下执行如下命令:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker-compose up -d<br></code></pre></div></td></tr></table></figure><p>第一次会下载一些镜像，花费时间就一点。</p></li><li><p>查看</p><p>查看启动的镜像</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker ps<br></code></pre></div></td></tr></table></figure><p><img src="/img/article/ttrss/ttrss.png"></p><p>访问端口ip:181，可以就说明没什么问题了。</p><p>P.S. 为了安全，改一下第10行和第44行的密码，并且密码要一致。</p><p>重载docker-compose.yml，得先停、再编写、最后重启</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker-compse down #stop<br>vim docker-compose.yml #write<br>docker-compose up -d #start<br></code></pre></div></td></tr></table></figure></li></ol><hr><h2 id="进一步"><a href="#进一步" class="headerlink" title="进一步"></a>进一步</h2><p>​    ok,以上就搞定了可以使用ip加端口部署ttrss。</p><p>​    下面介绍的是nginx反向代理和上ssl锁。</p><p>​    我用的是腾讯云的域名，然后可以直接申请一个免费的ssl证书。</p><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><p>如果你是安装nginx官网安装的话，nginx的配置文件在/etc/nginx/nginx.conf。(想说一点，官网配置中，location块是分开的，和网上教程不太一样，目的是便于管理。不知道也无所谓。)</p><p>参考文档:</p><blockquote><p><a href="https://cloud.tencent.com/document/product/400/35244">SSL 证书 Nginx 服务器 SSL 证书安装部署 - 证书安装 - 文档中心 - 腾讯云 (tencent.com)</a></p></blockquote><p>因为是分开的，所以以上文档成了参考文档(不过，也差不多)。</p><ol><li><p>nginx.conf配置</p><p>在hhtp块下加上以下代码(也可以选择替换# Settings for a TLS enabled server.这注释下面的代码。)</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">server &#123;<br>    listen 443 ssl;<br>    server_name sisilly.club;<br>    ssl_certificate 1_sisilly.club_bundle.crt;<br>    ssl_certificate_key 2_sisilly.club.key;<br>    ssl_session_timeout 5m;<br>    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;<br>    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<br>    ssl_prefer_server_ciphers on;<br>    include /etc/nginx/default.d/*.conf;<br><span class="hljs-meta">#</span><span class="bash">    location / &#123;</span><br><span class="hljs-meta">#</span><span class="bash">        root html;</span> <br><span class="hljs-meta">#</span><span class="bash">        index  index.html index.htm;</span><br><span class="hljs-meta">#</span><span class="bash">    &#125;</span><br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>location块配置</p><p>在default.d目录下创建一个ttrss.conf</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim /etc/nginx/default.d/ttrss.conf<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> bash</span><br>location / &#123;<br>    proxy_pass http://127.0.0.1:181/;<br>    rewrite ^/(.*)$ /$1 break;<br>    proxy_redirect off;<br>    proxy_set_header Host $host;<br>    proxy_set_header X-Forwarded-Proto $scheme;<br>    proxy_set_header X-Real-IP $remote_addr;<br>    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>    proxy_set_header Upgrade-Insecure-Requests 1;<br>    proxy_set_header X-Forwarded-Proto https;<br>  &#125;<br></code></pre></div></td></tr></table></figure></li><li><p>测试、启动</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nginx -t<br>service nginx start<br></code></pre></div></td></tr></table></figure><p>可能会报警告，只要在nginx.conf中的http块下加</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">proxy_headers_hash_max_size 51200;<br>proxy_headers_hash_bucket_size 6400;<br></code></pre></div></td></tr></table></figure></li></ol><h3 id="ttrss的docker-compose-yml配置"><a href="#ttrss的docker-compose-yml配置" class="headerlink" title="ttrss的docker-compose.yml配置"></a>ttrss的docker-compose.yml配置</h3><p>​    将 第九行- SELF_URL_PATH=<a href="http://localhost:181/%EF%BC%8C%E6%94%B9%E6%88%90-">http://localhost:181/，改成-</a> SELF_URL_PATH=https://域名/</p><p>  至此，结束。后面就是ttrss的配置了。可以看大佬文章。<a href="https://blog.laoda.de/archives/tinytinyrss">【服务器能干什么】二十分钟搭建一个属于自己的RSS服务 - 二十五画生 (laoda.de)</a></p><p>你可能需要:</p><blockquote><p>[Nginx配置文件详解 - 程序员自由之路 - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/54chensongxia/p/12938929.html#:~:text=Nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3">https://www.cnblogs.com/54chensongxia/p/12938929.html#:~:text=Nginx配置文件详解</a>. Nginx的主配置文件是nginx.conf，这个配置文件一共由三部分组成，分别为 全局块、events块和http块 。. 在http块中，又包含http全局块、多个server块。.,每个server块中，可以包含server全局块和多个location块。. 在同一配置块中嵌套的配置块，各个之间不存在次序关系。. 配置文件支持大量可配置的指令，绝大多数指令不是特定属于某一个块的。. 同一个指令放在不同层级的块中，其作用域也不同，一般情况下，高一级块中的指令可以作用于自身所在的块和此块包含的所有低层级块。. 如果某个指令在两个不同层级的块中同时出现，则采用”就近原则”，即以较低层级块中的配置为准。.)</p></blockquote><hr><p>2021-08-21</p><p>​    实践之后进行理论填充。之前搭建的ttrss是没有开启防火墙的情况下，看了一些书籍之后，感受到了安全的重要性。所以进行防火墙的补充、遇到问题的解决办法和懒人脚本补充。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">systemctl status firewalld <span class="hljs-comment"># 防火墙状态</span><br>systemctl stop firewalld   <span class="hljs-comment"># 防火墙关闭</span><br>systemctl start firewalld  <span class="hljs-comment"># 防火墙开启</span><br><br>firewall-cmd --zone=public --add-port=80/tcp --permanent <span class="hljs-comment"># 打开80端口</span><br>firewall-cmd --list-all    <span class="hljs-comment"># 查看防火墙开启的端口</span><br></code></pre></div></td></tr></table></figure><p>问题：PostgreSQL: Could not connect to server: TCP/IP connections on port 5432</p><p>​    ttrss用的是PostgreSQL，所以别忘记开5432端口。开启后，运行<code>docker-compose down</code>，将容器停下来，然后运行<code>service docker restart</code>，不然可能遇到<strong>ERROR: Failed to Setup IP tables: Unable to enable SKIP DNAT rule</strong>，然后就可以运行<code>docker-compose up -d</code>了。</p><p>​    大佬做好的一键安装脚本，容我膜拜一下。</p><blockquote><p><a href="https://www.ioiox.com/archives/139.html">https://www.ioiox.com/archives/139.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="rss" scheme="https://brraida.github.io/tags/rss/"/>
    
  </entry>
  
  <entry>
    <title>安装-redis</title>
    <link href="https://brraida.github.io/posts/6bcf3639/"/>
    <id>https://brraida.github.io/posts/6bcf3639/</id>
    <published>2021-07-22T11:05:58.000Z</published>
    <updated>2021-09-02T05:47:42.228Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>该博客写于2021年7月22号</p></blockquote><p>腾讯云，centos7.6，linux3.10.0-1160.11.1.el7.x86_64</p><h2 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h2><p>按官网的来就OK了。</p><p><a href="http://www.redis.cn/download.html">redis 6.0.6 下载 – Redis中国用户组（CRUG）</a></p><ol><li>下载、解压、编译</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wget http://download.redis.io/releases/redis-6.0.6.tar.gz<br>tar xzf redis-6.0.6.tar.gz -C /usr/local<br>cd /usr/local/redis-6.0.6<br>make<br></code></pre></div></td></tr></table></figure><ol start="2"><li>启动redis</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">/usr/local/redis-6.0.6/src/redis-server<br></code></pre></div></td></tr></table></figure><h2 id="redis配置"><a href="#redis配置" class="headerlink" title="redis配置"></a>redis配置</h2><p>​    主要是想讲这个，害，刚开始的时候，嫌麻烦，没弄。然后就被6379这个端口给搞了。</p><p>​    配置文件为redis.conf。</p><ol><li><p>更改端口</p><p>将port 6379改成其他端口号</p></li><li><p>以后台进程方式启动</p><p>修改daemonize no 为 daemonize yes</p><ol start="3"><li>设置redis远程连接、</li></ol><ul><li><p>如果选择不关闭防火墙，先放行端口</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --zone=public --add-port=8888/tcp --permanent<br>fire-cmd --reload<br></code></pre></div></td></tr></table></figure></li><li><p>如果用的是云服务器，你还需要放行安全组防火墙端口。</p></li><li><p>注释掉bind 127.0.0.1</p></li><li><p>设置redis远程连接密码:在requirepass foobard改成requirepass <your password></p></li></ul></li><li><p>启动redis,若redis已经启动，则先关闭。</p><p>查找redis的进程号:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ps -aux | grep redis<br></code></pre></div></td></tr></table></figure><p>杀死进程:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">kill -9 &lt;PID&gt;<br></code></pre></div></td></tr></table></figure><p>启动新配置的redis:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">/usr/local/redis-6.0.6/src/redis-server /usr/local/redis-6.0.6/redis.conf<br></code></pre></div></td></tr></table></figure></li></ol><p><a href="https://baijiahao.baidu.com/s?id=1667197295239073048&wfr=spider&for=pc">（史上最详细）CentOS7环境下Redis安装部署 (baidu.com)</a></p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="安装" scheme="https://brraida.github.io/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>os-suspend</title>
    <link href="https://brraida.github.io/posts/c4a439f8/"/>
    <id>https://brraida.github.io/posts/c4a439f8/</id>
    <published>2021-07-08T01:22:18.000Z</published>
    <updated>2021-09-02T05:47:42.196Z</updated>
    
    <content type="html"><![CDATA[<p>​    今天我想一个进程挂起，cpu要监督，所以简单的就想这个进程肯定有一部分是要占用内存的。其实，不然，cpu和内存是不能等价的。</p><p>​    进程挂起的结果是从内存转移到外存，所以<strong>挂起不占内存</strong>的。</p><p><a href="https://blog.csdn.net/weixin_37641832/article/details/83217104">操作系统——CPU和内存、挂起和阻塞_My Blogs-CSDN博客_挂起不释放cpu</a></p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="os" scheme="https://brraida.github.io/tags/os/"/>
    
  </entry>
  
  <entry>
    <title>hadoop&amp;spark安装</title>
    <link href="https://brraida.github.io/posts/1426aaf4/"/>
    <id>https://brraida.github.io/posts/1426aaf4/</id>
    <published>2021-06-20T16:00:00.000Z</published>
    <updated>2021-09-02T05:47:42.177Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>该博文写于2021-6-21</p></blockquote><p><strong>环境：腾讯云，centos7.6，linux3.10.0-1160.11.1.el7.x86_64</strong></p><h1 id="1-jdk下载与安装"><a href="#1-jdk下载与安装" class="headerlink" title="1.jdk下载与安装"></a>1.jdk下载与安装</h1><h2 id="1-1选择jdk"><a href="#1-1选择jdk" class="headerlink" title="1.1选择jdk"></a>1.1选择jdk</h2><p><img src="/img/article/hadoop&spark/Hadoop-%E9%80%89%E6%8B%A9jdk.png">                         </p><p>由Hadoop官方文档可知，最好下载java8。</p><p>下载： </p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wget https://repo.huaweicloud.com/java/jdk/8u181-b13/jdk-8u181-linux-x64.tar.gz<br></code></pre></div></td></tr></table></figure><h2 id="1-2解压"><a href="#1-2解压" class="headerlink" title="1.2解压"></a>1.2解压</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar zxvf jdk-8u181-linux-x64.tar.gz /usr/local  #安装软件最好这个位置，便于管理<br></code></pre></div></td></tr></table></figure><h2 id="1-3重命名"><a href="#1-3重命名" class="headerlink" title="1.3重命名"></a>1.3重命名</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mv jdk-8u181-linux-x64.tar.gz jdk8 <br></code></pre></div></td></tr></table></figure><h2 id="1-4环境配置"><a href="#1-4环境配置" class="headerlink" title="1.4环境配置"></a>1.4环境配置</h2> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"> vim ~/.bashrc #默认你下了vim了<br><span class="hljs-meta"> </span><br><span class="hljs-meta">#</span><span class="bash"> java environment</span><br>export JAVA_HOME=/usr/local/jdk8<br>export JRE_HOME=$&#123;JAVA_HOME&#125;/jre<br>export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib<br>export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> :wq保存退出</span><br></code></pre></div></td></tr></table></figure><h2 id="1-5环境变量生效"><a href="#1-5环境变量生效" class="headerlink" title="1.5环境变量生效"></a>1.5环境变量生效</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">source ~./bashrc<br></code></pre></div></td></tr></table></figure><h2 id="1-6验证"><a href="#1-6验证" class="headerlink" title="1.6验证"></a>1.6验证</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">java -version<br></code></pre></div></td></tr></table></figure><p>  PS：</p><p>​    1.如果之前安装过jdk，然后查询的java版本与下载的不一样，可能在”/etc/profile”设置了永久生效的环境变量。只要编辑”/etc/profile”中的相关内容就行了。</p><p>​    2.java8就是java1.8.x系列。</p><hr><h1 id="2-Hadoop作用、安装与配置"><a href="#2-Hadoop作用、安装与配置" class="headerlink" title="2.Hadoop作用、安装与配置"></a>2.Hadoop作用、安装与配置</h1><p>  <strong>是一个能够对大量数据进行分布式处理的软件框架。</strong></p><h2 id="2-1-Hadoop下载"><a href="#2-1-Hadoop下载" class="headerlink" title="2.1 Hadoop下载"></a>2.1 Hadoop下载</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wget https://mirrors.bfsu.edu.cn/apache/hadoop/common/stable/hadoop-3.3.0.tar.gz<br></code></pre></div></td></tr></table></figure><h2 id="2-2-解压"><a href="#2-2-解压" class="headerlink" title="2.2 解压"></a>2.2 解压</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar zxvf hadoop-3.3.0.tar.gz /usr/local<br></code></pre></div></td></tr></table></figure><h2 id="2-3-重命名"><a href="#2-3-重命名" class="headerlink" title="2.3 重命名"></a>2.3 重命名</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mv hadoop-3.3.0 hadoop<br></code></pre></div></td></tr></table></figure><h2 id="2-4-环境变量设置"><a href="#2-4-环境变量设置" class="headerlink" title="2.4 环境变量设置"></a>2.4 环境变量设置</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim ~./bashrc<br><span class="hljs-meta">#</span><span class="bash"> hadoop environment</span><br>export HADOOP_HOME=/usr/local/hadoop<br>export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native<br>export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin<br>export JAVA_LIBRAY_PATH=/usr/local/hadoop/lib/native<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> :wq 保存退出</span><br></code></pre></div></td></tr></table></figure><h2 id="2-5-环境变量生效"><a href="#2-5-环境变量生效" class="headerlink" title="2.5 环境变量生效"></a>2.5 环境变量生效</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">source ~./bashrc<br></code></pre></div></td></tr></table></figure><h2 id="2-6-验证"><a href="#2-6-验证" class="headerlink" title="2.6 验证"></a>2.6 验证</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hadoop version<br></code></pre></div></td></tr></table></figure><hr><h1 id="3-Hadoop伪分布式模式配置"><a href="#3-Hadoop伪分布式模式配置" class="headerlink" title="3.Hadoop伪分布式模式配置"></a>3.Hadoop伪分布式模式配置</h1><h2 id="3-1-Hadoop目录结构"><a href="#3-1-Hadoop目录结构" class="headerlink" title="3.1 Hadoop目录结构:"></a>3.1 Hadoop目录结构:</h2><ol><li><p>bin(工具程序目录) </p></li><li><p>etc/hadoop(配置文件目录)</p></li><li><p>sbin(服务程序目录，主要为服务启停脚本)</p></li><li><p>…(其他暂时用不到)</p></li></ol><h2 id="3-2-修改各种配置文件-etc-hadoop"><a href="#3-2-修改各种配置文件-etc-hadoop" class="headerlink" title="3.2 修改各种配置文件(etc/hadoop)"></a>3.2 修改各种配置文件(etc/hadoop)</h2><ul><li>修改hadoop-env.sh</li></ul><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/jdk8<br><span class="hljs-comment"># 解决Unable to load native-hadoop library for your platform...</span><br><span class="hljs-built_in">export</span> HADOOP_OPTS=<span class="hljs-string">&quot;-Djava.library.path=<span class="hljs-variable">$&#123;HADOOP_HOME&#125;</span>/lib/native&quot;</span><br></code></pre></div></td></tr></table></figure><ul><li>修改core-site.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:/usr/local/hadoop/tmp<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Abase for other temporary directories.<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://localhost:9000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>修改hdfs-site.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/name<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.datanode.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/data<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="3-3-测试HDFS"><a href="#3-3-测试HDFS" class="headerlink" title="3.3 测试HDFS"></a>3.3 测试HDFS</h2><ul><li>NameNode格式化</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">/usr/local/hadoop/bin/hdfs namenode –format<br></code></pre></div></td></tr></table></figure><ul><li>启动ssh</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">service sshd start<br></code></pre></div></td></tr></table></figure><ul><li>启动dfs</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">/usr/local/hadoop/sbin/start-dfs.sh<br>jps<br></code></pre></div></td></tr></table></figure><p>​    以上是正确结果，在启动过程中可能会遇到:</p><ul><li>问题1：Error: Attempting to operate on hdfs namenode as root…</li></ul><p><img src="/img/article/hadoop&spark/%E9%97%AE%E9%A2%981.png"></p><p>​    原因：</p><blockquote><p>hadoop install for different user and you start yarn service for different user. OR in hadoop config’s hadoop-env.sh specified HDFS_NAMENODE_USER and HDFS_DATANODE_USER  user is something else.</p></blockquote><p>​    解决方法:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim /etc/profile<br><span class="hljs-meta">#</span><span class="bash">在profile中填加以下内容</span><br>export HDFS_NAMENODE_USER=root<br>export HDFS_DATANODE_USER=root<br>export HDFS_SECONDARYNAMENODE_USER=root<br>export YARN_RESOURCEMANAGER_USER=root<br>export YARN_NODEMANAGER_USER=root<br><span class="hljs-meta">#</span><span class="bash">:wq 保存</span><br><span class="hljs-meta">#</span><span class="bash">生效</span><br>source /etc/profile<br></code></pre></div></td></tr></table></figure><p>​    参考链接：</p><p><a href="https://blog.csdn.net/weixin_49736959/article/details/108897129">两种解决ERROR: Attempting to operate on hdfs namenode as root的方法_世幻水的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/ystyaoshengting/article/details/103026872">ERROR: but there is no HDFS_NAMENODE_USER defined. Aborting operation._ystyaoshengting的专栏-CSDN博客</a></p><ul><li>问题2：Permission denied…</li></ul><p><img src="/img/article/hadoop&spark/%E9%97%AE%E9%A2%982.png"></p><p>​    原因：</p><p>​    ssh下的文件有访问权限</p><p>​    解决方法:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进行免密协议设置:</span><br>cd ~/.ssh/           # 若没有该目录，请先执行一次ssh localhost<br>ssh-keygen -t rsa       # 会有提示，都按回车就可以<br>cat id_rsa.pub &gt;&gt; authorized_keys # 加入授权<br>chmod 600 ./authorized_keys  # 修改文件权限<br>chmod 600 ./id_rsa<br>chmod 644 id_rsa.pub<br>chmod 644 ./known_hosts #我第一次修改的时候有这个文件夹，第二次就没有。不过对后面配置不影响。<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 修改sshd_config文件</span><br>HostKey /etc/ssh/ssh_host_rsa_key<br>RSAAuthentication yes  #这句没有，找的地方加上就行<br>PubkeyAuthentication yes<br>AuthorizedKeysFile .ssh/authorized_keys<br><span class="hljs-meta">#</span><span class="bash"> :wq保存</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 命令行输入</span><br>service sshd restart<br></code></pre></div></td></tr></table></figure><ul><li>问题3：无NameNode</li></ul><p><img src="/img/article/hadoop&spark/%E9%97%AE%E9%A2%983.png"></p><p>​    原因：查阅说是多次初始化造成的。</p><p>​    解决方法:</p><ol><li><p>首先</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">/usr/local/hadoop/sbin/stop-all.sh<br></code></pre></div></td></tr></table></figure></li><li><p>删除原先创建的目录，即core-site.xml下配置的<name>hadoop.tmp.dir</name>所指向的目录。（我这里就是tmp目录）删除后要重新建立tmp空白目录。</p></li><li><p>格式化</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">/usr/local/hadoop/bin/hadoop namenode -format<br></code></pre></div></td></tr></table></figure></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">/usr/local/hadoop/sbin/start-all.sh<br></code></pre></div></td></tr></table></figure></li><li><p>用jsp查询时，就能看到NameNode进程</p><p><img src="/img/article/hadoop&spark/%E6%AD%A3%E7%A1%AE%E7%BB%93%E6%9E%9C.png"></p></li></ol><h2 id="3-4-查看hadoop页面"><a href="#3-4-查看hadoop页面" class="headerlink" title="3.4 查看hadoop页面"></a>3.4 查看hadoop页面</h2><p>​    浏览器输入: 公网ip地址:9870(如果是本地: <a href="http://localhost:9870/">http://localhost:9870</a>)</p><p>​    用云服务器还要记得开9870端口</p><p><img src="/img/article/hadoop&spark/hadoop%E9%A1%B5%E9%9D%A2.png"></p><p>​    可得如上图即Hadoop部署成功一大半</p><h2 id="3-5-YARN单机配置（配置文件也在etc-hadoop中）"><a href="#3-5-YARN单机配置（配置文件也在etc-hadoop中）" class="headerlink" title="3.5 YARN单机配置（配置文件也在etc/hadoop中）"></a>3.5 YARN单机配置（配置文件也在etc/hadoop中）</h2><ul><li>修改mapred-site.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">   <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.map.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.reduce.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>修改yarn-site.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="3-6-查看资源管理页面"><a href="#3-6-查看资源管理页面" class="headerlink" title="3.6 查看资源管理页面"></a>3.6 查看资源管理页面</h2><p>   运行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">/usr/local/hadoop/sbin/start-all.sh<br></code></pre></div></td></tr></table></figure><p>​    打开网址:</p><p>​    公网ip地址:8080（记得开8080端口）</p><p><img src="/img/article/hadoop&spark/spark-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E9%A1%B5%E9%9D%A2.png"></p><p>​    自此，Hadoop配置完成</p><h1 id="4-Scala安装与配置"><a href="#4-Scala安装与配置" class="headerlink" title="4.Scala安装与配置"></a>4.Scala安装与配置</h1><p><img src="/img/article/hadoop&spark/spark-scala%E9%80%89%E6%8B%A9.png"> </p><p>可以看出安装spark之前还要安装一个Scala。</p><h2 id="4-1-下载-在-usr-local目录下下载，推荐"><a href="#4-1-下载-在-usr-local目录下下载，推荐" class="headerlink" title="4.1 下载(在/usr/local目录下下载，推荐)"></a>4.1 下载(在/usr/local目录下下载，推荐)</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wget https://downloads.lightbend.com/scala/2.12.12/scala-2.12.12.tgz<br></code></pre></div></td></tr></table></figure><h2 id="4-2-解压"><a href="#4-2-解压" class="headerlink" title="4.2 解压"></a>4.2 解压</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar zxvf scala-2.12.12.tgz<br><br>vim /etc/profile  <br><span class="hljs-meta">#</span><span class="bash">scala environment</span><br>export SCALA_HOME=&quot;/usr/local/scala-2.12.12&quot;<br>export PATH=$PATH:$JAVA_HOME/bin:$SCALA_HOME/bin<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">wq</span><br></code></pre></div></td></tr></table></figure><h2 id="4-3-环境有效"><a href="#4-3-环境有效" class="headerlink" title="4.3 环境有效"></a>4.3 环境有效</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">source /etc/profile<br></code></pre></div></td></tr></table></figure><h2 id="4-6-验证"><a href="#4-6-验证" class="headerlink" title="4.6 验证"></a>4.6 验证</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">scala -version<br></code></pre></div></td></tr></table></figure><h1 id="5-spark安装与配置"><a href="#5-spark安装与配置" class="headerlink" title="5. spark安装与配置"></a>5. spark安装与配置</h1><p>​    Apache Spark 是专为大规模数据处理而设计的快速通用的计算引擎。Spark是UC Berkeley AMP lab (加州大学伯克利分校的AMP实验室)所开源的类Hadoop MapReduce的通用并行框架，Spark，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是——Job中间输出结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的MapReduce的算法。</p><h2 id="5-1-下载-在-usr-local目录下下载，推荐"><a href="#5-1-下载-在-usr-local目录下下载，推荐" class="headerlink" title="5.1 下载(在/usr/local目录下下载，推荐)"></a>5.1 下载(在/usr/local目录下下载，推荐)</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wget https://mirrors.tuna.tsinghua.edu.cn/apache/spark/spark-3.1.2/spark-3.1.2-bin-hadoop3.2.tgz <br></code></pre></div></td></tr></table></figure><h2 id="5-2-解压"><a href="#5-2-解压" class="headerlink" title="5.2 解压"></a>5.2 解压</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar xzvf spark-3.1.2-bin-hadoop3.2 spark<br></code></pre></div></td></tr></table></figure><h2 id="5-3-重命名"><a href="#5-3-重命名" class="headerlink" title="5.3 重命名"></a>5.3 重命名</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mv  spark-3.1.2-bin-hadoop3.2 spark<br></code></pre></div></td></tr></table></figure><h2 id="5-4-配置环境变量"><a href="#5-4-配置环境变量" class="headerlink" title="5.4 配置环境变量"></a>5.4 配置环境变量</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"> vim ~/.bashrc<br><br>export SPARK_HOME=/usr/local/spark<br>export PATH=$PATH: $&#123;SPARK_HOME&#125;/bin<br></code></pre></div></td></tr></table></figure><h2 id="5-5-环境生效"><a href="#5-5-环境生效" class="headerlink" title="5.5 环境生效"></a>5.5 环境生效</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">source /.bashrc<br></code></pre></div></td></tr></table></figure><h2 id="5-6-配置spark（spark-conf）"><a href="#5-6-配置spark（spark-conf）" class="headerlink" title="5.6 配置spark（spark/conf）"></a>5.6 配置spark（spark/conf）</h2><p>​    修改spark-env.sh(原本没有，但是有spark-env.sh.template,可以选择复制或是重建)</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim spark-env.sh<br><br>export LD_LIBRARY_PATH=$JAVA_LIBRARY_PATH<br>export JAVA_HOME=/usr/local/jdk8<br>export SPARK_MASTER_IP=localhost<br>export SPARK_WORKER_MEMORY=4g<br></code></pre></div></td></tr></table></figure><h2 id="5-7启动spark"><a href="#5-7启动spark" class="headerlink" title="5.7启动spark"></a>5.7启动spark</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">/usr/local/spark/sbin/start-all.sh<br>jps<br></code></pre></div></td></tr></table></figure><p><img src="/img/article/hadoop&spark/spark-%E9%BB%91%E7%9B%92%E5%AD%90%E6%98%BE%E7%A4%BA.png"></p><p>​    结果如上。</p><p>​    打开网址: 公网ip地址:8080(记得开8080端口)</p><p><img src="/img/article/hadoop&spark/spark-%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E6%98%BE%E7%A4%BA.png"></p><p>配置成功，自此结束</p><h2 id="5-8-启动pyspark"><a href="#5-8-启动pyspark" class="headerlink" title="5.8 启动pyspark"></a>5.8 启动pyspark</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pyspark --master local[2]<br></code></pre></div></td></tr></table></figure><p>参考链接：</p><p>[WSL搭建Hadoop与Spark环境_文艺圈不知名刘先生-CSDN博客](<a href="https://blog.csdn.net/huiruwei">https://blog.csdn.net/huiruwei</a>    1020/article/details/115033974)</p><h1 id="6．测试spark"><a href="#6．测试spark" class="headerlink" title="6．测试spark"></a>6．测试spark</h1><p>博主也是刚玩，不会同时测试两个。所以就测试一下spark的并行运算能力。  博主会一点点python，所以选择pyspark。也可以使用scala或java。</p><p>  pi.py文件代码为(蒙特卡洛方法):</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pyspark <span class="hljs-keyword">import</span> SparkContext<br><span class="hljs-keyword">import</span> random<br><span class="hljs-number">1</span><br>sc=SparkContext(<span class="hljs-string">&quot;local&quot;</span>,<span class="hljs-string">&quot;firstapp&quot;</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inside</span>(<span class="hljs-params">p</span>):</span><br>     x, y = random.random(), random.random()<br>     <span class="hljs-keyword">return</span> x*x + y*y &lt; <span class="hljs-number">1</span><br><br>NUM_SAMPLES=<span class="hljs-number">10000</span><br>count = sc.parallelize(<span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, NUM_SAMPLES)) /<br>          .<span class="hljs-built_in">filter</span>(inside).count()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Pi is roughly %f&quot;</span> % (<span class="hljs-number">4.0</span> * count / NUM_SAMPLES))<br></code></pre></div></td></tr></table></figure><p>  命令行执行spark-submit pi.py</p><p>参考链接：</p><p><a href="http://spark.apache.org/examples.html">Examples | Apache Spark</a></p><p><a href="https://www.jianshu.com/p/5a42fe0eed4d">大数据入门与实战-PySpark的使用教程 - 简书 (jianshu.com)</a>    </p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="bigData" scheme="https://brraida.github.io/tags/bigData/"/>
    
  </entry>
  
  <entry>
    <title>py-lambda</title>
    <link href="https://brraida.github.io/posts/69805bbd/"/>
    <id>https://brraida.github.io/posts/69805bbd/</id>
    <published>2021-06-13T16:00:00.000Z</published>
    <updated>2021-09-02T05:47:42.189Z</updated>
    
    <content type="html"><![CDATA[<p>​    今天复习到了定积分，重新学了定积分的概念。迫不及待的使用python的lambda来实验实验。</p><p><img src="/img/article/py-lambda/%E5%AE%9A%E7%A7%AF%E5%88%861.jpg"></p><p><img src="/img/article/py-lambda/%E5%AE%9A%E7%A7%AF%E5%88%862.jpg"></p><p><img src="/img/article/py-lambda/%E5%AE%9A%E7%A7%AF%E5%88%863.jpg"></p><blockquote><p>lambda[arg1[,arg2,arg3…argn]]:expression</p><p>返回的是一个方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getResult</span>(<span class="hljs-params">a, b, n</span>):</span><br>    fx = <span class="hljs-keyword">lambda</span> x: x**<span class="hljs-number">2</span><br>    gap = (b - a) / n<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        res += fx(a + i * gap + gap / <span class="hljs-number">2</span>) * gap<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-built_in">print</span>(getResult(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1000</span>))<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="python" scheme="https://brraida.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>一些基础linux指令</title>
    <link href="https://brraida.github.io/posts/72475525/"/>
    <id>https://brraida.github.io/posts/72475525/</id>
    <published>2021-06-12T16:00:00.000Z</published>
    <updated>2021-09-02T05:47:42.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><ul><li>修改文件名或目录名</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mv oldFileName(oldDirectoryName) newFileName(newDirectoryName)<br></code></pre></div></td></tr></table></figure><ul><li>查看端口</li></ul><p><a href="https://blog.csdn.net/qq_41675254/article/details/85208057">Linux查看端口使用状态、关闭端口及配置端口方法 详细_会发抖的秒表的博客-CSDN博客_linux 端口</a></p><p>​    lsof -i:端口号</p><p>​    losf -i        #查看全部</p><ul><li><p>vim查找</p><p><strong>:/关键词</strong> 回车开始查找，按n查找下一个</p><p><strong>:数字</strong> 回车到某行</p></li></ul><ul><li><p>查看已开放端口</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --list-all<br></code></pre></div></td></tr></table></figure></li><li><p>防火墙开放端口（开放端口后需要重载防火墙）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --zone=public --add-port=80/tcp --permanent<br>firewall-cmd --reload<br></code></pre></div></td></tr></table></figure></li><li><p>修改密码</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">passwd &lt;usrname&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>修改主机名</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hostnamectl set-hostname &lt;newhostname&gt;<br></code></pre></div></td></tr></table></figure></li></ul><hr><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><ul><li><p>查看docker内全部ip地址</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker inspect --format=&#x27;&#123;&#123;.Name&#125;&#125; - &#123;&#123;range.NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; $(docker ps -aq)<br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="linux" scheme="https://brraida.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Windows快捷键</title>
    <link href="https://brraida.github.io/posts/459f9e41/"/>
    <id>https://brraida.github.io/posts/459f9e41/</id>
    <published>2021-06-07T16:00:00.000Z</published>
    <updated>2021-09-02T05:47:42.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><ol><li>alt+tab 快速切换窗口，松开就切换</li><li>windows+tab 切换窗口</li><li>alt+ctrl+tab 切换窗口，可以停留</li><li>ctrl+shift 切换键盘</li></ol>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>py study note</title>
    <link href="https://brraida.github.io/posts/a29203f1/"/>
    <id>https://brraida.github.io/posts/a29203f1/</id>
    <published>2021-06-06T16:00:00.000Z</published>
    <updated>2021-09-02T05:47:42.198Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>6月7号    :sunny:</p></blockquote><h2 id="继承-inheritance"><a href="#继承-inheritance" class="headerlink" title="继承(inheritance)"></a>继承(inheritance)</h2><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p>​    @staticmethod</p><h4 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h4><p>​    @classmethod</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>​    类方法的第一个参数必须是指向本身的引用，而静态方法可以没有任何参数。</p><hr><h4 id="受保护变量和方法-protected"><a href="#受保护变量和方法-protected" class="headerlink" title="受保护变量和方法(protected)"></a>受保护变量和方法(protected)</h4><p>​    单下划线</p><ol><li>受保护的变量能在本类和子类里被使用</li><li>受保护的方法不能在非子类中调用</li></ol><p>​    </p><h4 id="私有变量和方法-private"><a href="#私有变量和方法-private" class="headerlink" title="私有变量和方法(private)"></a>私有变量和方法(private)</h4><p>​    双下划线</p><hr><h2 id="多态-polymorphism"><a href="#多态-polymorphism" class="headerlink" title="多态(polymorphism)"></a>多态(polymorphism)</h2><p>​    定义：实现同一个功能的方法可以有不同的表现形态。</p><p>​    note：</p><ol><li>方法同名但参数类型不同，或者同一个方法能适应于不同类型的调式场景。</li><li>不允许两个方法同名但参数个数不同。（java是允许的）</li></ol><hr><h2 id="import-amp-amp-module"><a href="#import-amp-amp-module" class="headerlink" title="import &amp;&amp; module"></a>import &amp;&amp; module</h2><p>​    <strong>modules</strong>: </p><ol><li>自定义模块</li><li>内置标准模块</li><li>开源模块      <a href="https://pypi.org/">PyPI · The Python Package Index</a></li></ol><h3 id="导入现有模块"><a href="#导入现有模块" class="headerlink" title="导入现有模块"></a>导入现有模块</h3><p>​    <strong>使用方式</strong></p><ol><li><p>import moduleName as elseName</p><p>e.g import numpy as np</p></li><li><p>from moduleName import className(methodName/propertyName)</p><p>e.g from numpy import sin</p></li></ol><h3 id="导入包中模块"><a href="#导入包中模块" class="headerlink" title="导入包中模块"></a>导入包中模块</h3><p>​    如果<strong>以模块的形式复用代码</strong>出现了模块冲突的情况，则无法导入<strong>实现功能不同但是名字相同</strong>的模块，为了解决这个问题，可以用<strong>包的形式</strong>来复用现有功能。</p><p>可以导入整个模块也可以精确导入某个模块的某个方法，速度和范围的差别。</p><hr><h2 id="isinstance-amp-amp-type"><a href="#isinstance-amp-amp-type" class="headerlink" title="isinstance() &amp;&amp; type()"></a>isinstance() &amp;&amp; type()</h2><blockquote><p>用法：</p><p>isinstance(object,classinfo)</p></blockquote><blockquote><p>用法：</p><p>type(object)</p></blockquote><blockquote><p>isinstance() 与 type() 区别：</p><ul><li><p>type() 不会认为子类是一种父类类型，不考虑继承关系。</p></li><li><p>isinstance() 会认为子类是一种父类类型，考虑继承关系。</p></li></ul><p><strong>如果要判断两个类型是否相同推荐使用 isinstance()。</strong></p></blockquote><hr><blockquote><p>6月8号    :sunny:</p></blockquote><h2 id="异常-exception"><a href="#异常-exception" class="headerlink" title="异常(exception)"></a>异常(exception)</h2><p>​    处理原则:出现异常不要紧，但要把异常影响范围限制到最小。</p><p>​    实现要点：</p><ol><li>正确的提示异常信息。</li><li>合理监控和设置监控范围和异常处理的措施。</li><li>使用finally从句回收系统资源。</li></ol><h3 id="常用的异常处理类（被动）"><a href="#常用的异常处理类（被动）" class="headerlink" title="常用的异常处理类（被动）"></a>常用的异常处理类（被动）</h3><table><thead><tr><th>异常处理类名</th><th align="left">触发场景</th></tr></thead><tbody><tr><td>IndexError</td><td align="left">索引出错触发</td></tr><tr><td>ValueError</td><td align="left">类型参数正确，但返回值不符合预期是会触发</td></tr><tr><td>TypeError</td><td align="left">函数参数类型不正确时会触发</td></tr><tr><td>ZeroDivisionError</td><td align="left">除零出错</td></tr><tr><td>AttributeError</td><td align="left">引用属性错误触发</td></tr><tr><td>OSError</td><td align="left">无法完成操作系统级的任务时，会触发该类异常。(无法打开文件)</td></tr><tr><td>FloatingPointError</td><td align="left">浮点类计算错误</td></tr><tr><td>OverflowError</td><td align="left">数值运算时超过此种类数值的最大范围</td></tr><tr><td>UnicodeTranslateErrror</td><td align="left">Unicode转换时出错</td></tr></tbody></table><h3 id="Raise（主动）"><a href="#Raise（主动）" class="headerlink" title="Raise（主动）"></a>Raise（主动）</h3><p>​    自定义的异常描述信息会更具有操作性。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">divide</span>(<span class="hljs-params">x, y</span>):</span><br>    <span class="hljs-keyword">if</span> y == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;divisor is 0&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> x / y<br>    <span class="hljs-keyword">except</span> TypeError:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;parameters Type error&#x27;</span>)<br><br><br><span class="hljs-keyword">try</span>:<br>    divide(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">try</span>:<br>    divide(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e)<br><br></code></pre></div></td></tr></table></figure><h3 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h3><blockquote><p>Python 垃圾回收机制，只能帮我们回收变量、类对象占用的内存，而无法自动完成类似关闭文件、数据库连接等这些的工作。</p></blockquote><p>​    作用：资源回收(比如关闭文件、数据库连接等这些的工作)</p><p>​    功能：无论try块是否发生异常，最终都要进入finally语句，并执行其中的代码块。</p><p>参考链接：<a href="http://c.biancheng.net/view/2316.html">Python try except finally：资源回收 (biancheng.net)</a></p><p>​    有点意思的地方</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">funcWithFinally</span>():</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;in try&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;try end&quot;</span><br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;in finally&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;finally end&quot;</span><br><br><br><span class="hljs-built_in">print</span>(funcWithFinally())<br><br><br></code></pre></div></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex">输出结果:<br>in try<br>in finally<br>finally end<br></code></pre></div></td></tr></table></figure><p>​    说明第七行比第四行提前执行了。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">funcWithFinally</span>():</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;in try&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;try end&quot;</span><br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;in finally&quot;</span>)<br><br><br><span class="hljs-built_in">print</span>(funcWithFinally())<br><br></code></pre></div></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex">输出结果:<br>in try<br>in finally<br>try end<br></code></pre></div></td></tr></table></figure><p>​    会回到第四行执行。</p><blockquote><p>6月9号    :sun_behind_large_cloud:</p></blockquote><h2 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><table><thead><tr><th>参数值</th><th>含义</th></tr></thead><tbody><tr><td>r</td><td>读取模式</td></tr><tr><td>w</td><td>写入模式。若文件不存在，则创建一个文件，写入；若文件存在，则清空再写入。</td></tr><tr><td>r+</td><td>读写模式。从文件头开始写，保留原文件中没有被覆盖的内容。</td></tr><tr><td>w+</td><td>读写模式。若文件不存在，则创建一个文件，写入；若文件存在，则清空再写入。</td></tr><tr><td>a</td><td>附加写模式(不可读)。若文件不存在，则创建一个文件；若文件存在，写入的数据会被加到文件末尾，即文件原来的内容会被保留。</td></tr><tr><td>a+</td><td>附加读写模式。若文件不存在，则创建一个文件；若文件存在，写入的数据会被加到文件末尾，即文件原来的内容会被保留。</td></tr><tr><td>b</td><td>二进制模式，非文本模式</td></tr></tbody></table><h3 id="复制和移动文件"><a href="#复制和移动文件" class="headerlink" title="复制和移动文件"></a>复制和移动文件</h3><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">import <span class="hljs-built_in">os</span>, shutil<br><br><br>def moveFile(src, dest):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.isfile(src):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;file not exist!&#x27;</span> + src)<br>    <span class="hljs-keyword">else</span>:<br>        fpath = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.split(dest)[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.exists(fpath):<br>            <span class="hljs-built_in">os</span>.makedirs(fpath)<br>        shutil.move(src, dest)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;finished moving&#x27;</span>)<br><br><br>def copyFile(src, dest):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.isfile(src):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;file not exist!&#x27;</span> + src)<br>    <span class="hljs-keyword">else</span>:<br>        fpath = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.split(dest)[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.exists(fpath):<br>            <span class="hljs-built_in">os</span>.makedirs(fpath)<br>        shutil.copyfile(src, dest)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;finished copy&#x27;</span>)<br><br><br>srcForCopy = <span class="hljs-string">&#x27;D:\\3\\2.jpg&#x27;</span><br>destForCopy = <span class="hljs-string">&#x27;D:\\3\\22.jpg&#x27;</span><br>srcForMove = <span class="hljs-string">&#x27;D:\\3\\python1.txt&#x27;</span><br>destForMove = <span class="hljs-string">&#x27;D:\\3\\python3.txt&#x27;</span><br>copyFile(srcForCopy, destForCopy)<br># moveFile(srcForMove, destForMove)<br><br></code></pre></div></td></tr></table></figure><p>​    <strong>GET</strong></p><p>​    makedirs()    #递归创建目录</p><p>​    mkdir()    #创建一级目录</p><p>​    path.os.split(path) #返回一个数组，第一个元素是路径，第二个是文件名。</p><p>参考链接:</p><p>​    <a href="https://www.runoob.com/python/python-os-path.html">Python os.path() 模块 | 菜鸟教程 (runoob.com)</a></p><p>​    <a href="https://www.runoob.com/python/os-makedirs.html">Python os.makedirs() 方法 | 菜鸟教程 (runoob.com)</a></p><hr><blockquote><p>2021-6-13 </p></blockquote><h2 id="urllib库"><a href="#urllib库" class="headerlink" title="urllib库"></a>urllib库</h2><h3 id="urlopen方法"><a href="#urlopen方法" class="headerlink" title="urlopen方法"></a>urlopen方法</h3><blockquote><p>urllib.request.urlopen(url)    #GET</p><p>urllib.request.urlopen(url,data=None,[timeout]) #POST</p></blockquote><p>​    直接用urllib.request模块的urlopen（）获取页面，page的数据格式为bytes类型，需要decode（）解码，转换成str类型。反过来也就是说，在使用post这种方式的时候，data就要以字节形式做参传入。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request<br><br>stockCode = <span class="hljs-string">&#x27;600895&#x27;</span><br>url = <span class="hljs-string">&#x27;http://quotes.money.163.com/service/chddata.html&#x27;</span><br>param = <span class="hljs-built_in">bytes</span>(urllib.parse.urlencode(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span> + stockCode,<br>                                      <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-string">&#x27;20210602&#x27;</span>,<br>                                      <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-string">&#x27;20210602&#x27;</span>,<br>                                      <span class="hljs-string">&#x27;fields&#x27;</span>: <span class="hljs-string">&#x27;TCLOSE;HIGH;LOW;TOPEN;CHG;PCHG;TURNOVER;VOTURNOVER;VATURNOVER&#x27;</span>&#125;),<br>              encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>response = urllib.request.urlopen(url, data=param, timeout=<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&#x27;gbk&#x27;</span>))<br>response.close()<br><br></code></pre></div></td></tr></table></figure><p>参考链接:</p><p><a href="https://blog.csdn.net/qq_41856814/article/details/99658108">Python3中urlopen()详解</a></p><h3 id="urlretrieve方法"><a href="#urlretrieve方法" class="headerlink" title="urlretrieve方法"></a>urlretrieve方法</h3><blockquote><p>urllib.request.urlretrieve(url,filename,data)    #取己所需，所以参考链接的更完整详细</p></blockquote><p>返回一个包含两个元素的元组(filename, headers)，filename表示保存到本地的路径，header表示服务器的响应头。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getAndSaveStock</span>(<span class="hljs-params">stockCodeList, path</span>):</span><br>    <span class="hljs-keyword">for</span> stockCode <span class="hljs-keyword">in</span> stockCodeList:<br>        url = <span class="hljs-string">&#x27;http://quotes.money.163.com/service/chddata.html&#x27;</span><br>        param = <span class="hljs-built_in">bytes</span>(urllib.parse.urlencode(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span> + stockCode,<br>                                              <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-string">&#x27;20210602&#x27;</span>,<br>                                              <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-string">&#x27;202106012&#x27;</span>,<br>                                              <span class="hljs-string">&#x27;fields&#x27;</span>: <span class="hljs-string">&#x27;TCLOSE;HIGH;LOW;TOPEN;CHG;PCHG;TURNOVER;VOTURNOVER;VATURNOVER&#x27;</span>&#125;)<br>                      , encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>        urllib.request.urlretrieve(url, path + stockCode + <span class="hljs-string">&#x27;.csv&#x27;</span>, data=param)<br><br><br>stockCodeList = []<br>stockCodeList.append(<span class="hljs-string">&#x27;600895&#x27;</span>)<br>stockCodeList.append(<span class="hljs-string">&#x27;600007&#x27;</span>)<br>getAndSaveStock(stockCodeList, <span class="hljs-string">&#x27;D:\\3\\&#x27;</span>)<br><br></code></pre></div></td></tr></table></figure><p>​    发现如果将第12行的’.csv’改成’.txt’也是可以的。真方便啊！记得我学csv的时候，还要用它的相关库，一行行写入。</p><p>参考链接:</p><p><a href="https://cloud.tencent.com/developer/article/1406358">urllib.request.urlretrieve()函数</a></p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><p>​    作用：一般用来搜索和替换符合特定规则的文本。</p><blockquote><p>2021-6-14 :sunny:</p></blockquote><h4 id="常用正则字符"><a href="#常用正则字符" class="headerlink" title="常用正则字符"></a>常用正则字符</h4><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>开始标记</td></tr><tr><td>$</td><td>结束标记</td></tr><tr><td>+</td><td>匹配一次或多次</td></tr><tr><td>*</td><td>匹配零次或多次</td></tr><tr><td>[]</td><td>表示一个字符集</td></tr><tr><td>a-z</td><td>表示小写字母</td></tr><tr><td>|</td><td>表示“或”</td></tr><tr><td>{}</td><td>匹配指定字符n次</td></tr><tr><td>.</td><td>任意字符</td></tr><tr><td>？</td><td>非贪心</td></tr><tr><td>\w</td><td>匹配任何字母、数字和下划线</td></tr><tr><td>\d</td><td>匹配任何数字</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符</td></tr><tr><td>()</td><td>将位于()内的内容作为整体对待</td></tr></tbody></table><p><strong>匹配字符串一般用法：</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">myStr=<span class="hljs-string">&#x27;balaba&#x27;</span><br>myPattern=<span class="hljs-string">&#x27;\w+&#x27;</span><br><span class="hljs-keyword">if</span> re.match(myPattern,myStr):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;get&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h4 id="正则表达式截取字符串"><a href="#正则表达式截取字符串" class="headerlink" title="正则表达式截取字符串"></a>正则表达式截取字符串</h4><p>​    绝了，发现自己以前根本不会截取字符串而是匹配字符串…</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br><span class="hljs-built_in">print</span>(re.split(<span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;content=hello&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.split(<span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;content=hello&#x27;</span>)[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(re.split(<span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;content=hello&#x27;</span>)[<span class="hljs-number">1</span>])<br><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;content=code:(6000),price:(20)&#x27;</span><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;[(](.*?)[)]&#x27;</span><span class="hljs-comment">#这个操作可以获取全部()内容，不包括()!</span><br><span class="hljs-built_in">print</span>(re.findall(pattern, <span class="hljs-built_in">str</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">r&#x27;\((.*?)\)&#x27;</span>, <span class="hljs-built_in">str</span>))<span class="hljs-comment">#这个同理，就是用了转义字符</span><br><br>rule = <span class="hljs-string">r&#x27;&lt;(.*?)&gt;&#x27;</span><br><span class="hljs-built_in">print</span>(re.findall(rule, <span class="hljs-string">&#x27;&lt;vcontent&gt;=&lt;ok?&gt;&#x27;</span>))<span class="hljs-comment">#获取全部&lt;&gt;之间内容，不包括&lt;&gt;!</span><br><span class="hljs-built_in">print</span>(re.findall(rule, <span class="hljs-string">&#x27;&lt;vcontent=&lt;ok?&gt;&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">r&#x27;a(.*?)a&#x27;</span>, <span class="hljs-string">&#x27;acontenta =&lt;ok?&gt;&#x27;</span>))<span class="hljs-comment">#获取aa之间内容，不包括a!</span><br><br>rule = <span class="hljs-string">r&#x27;&quot;(.*?)&quot;&#x27;</span><br><span class="hljs-built_in">print</span>(re.findall(rule, <span class="hljs-string">&#x27;&quot;vcontent&quot;=&lt;ok?&gt;&#x27;</span>))<span class="hljs-comment">#获取“”之间内容</span><br><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;60001,10,12,15&#x27;</span><br><span class="hljs-built_in">print</span>(re.split(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-built_in">str</span>))<span class="hljs-comment">#split也可以用于re,见识短浅，以前以为只可用于str</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>.split(<span class="hljs-string">&#x27;,&#x27;</span>))<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="python" scheme="https://brraida.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>node.js安装</title>
    <link href="https://brraida.github.io/posts/63a2d85/"/>
    <id>https://brraida.github.io/posts/63a2d85/</id>
    <published>2021-06-01T16:00:00.000Z</published>
    <updated>2021-09-02T05:47:42.223Z</updated>
    
    <content type="html"><![CDATA[<p>​    我终于知道为什么要下载安装包，而不是直接用yum源了。因为yum源里的版本可能会比较旧，去官网下载就不一样了，可以获取最新的、更好的版本。</p><blockquote><p>该博客写于2021年6月2号</p></blockquote><p>​    腾讯云，centos7.6，linux3.10.0-1160.11.1.el7.x86_64</p><p>​    嫌yum源太旧，去官网<a href="https://nodejs.org/en/">Node.js (nodejs.org)</a>下载。</p><ol><li><p>下载</p><p>去官网看最新的或是最稳定的版本号，将下列语句的版本号（v14.17.0）改一下，执行。</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wget https://nodejs.org/dist/v14.17.0/node-v14.17.0-linux-x64.tar.xz<br></code></pre></div></td></tr></table></figure><ol start="2"><li>解压</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar zxvf node-v14.17.0-linux-x64.tar.xz<br></code></pre></div></td></tr></table></figure><ol start="3"><li><p>移动</p><p>一般都是将软件放在/usr/local路径下（也可以自定义）</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mv node-v14.17.0-linux-x64 /usr/local/node-v14<br></code></pre></div></td></tr></table></figure><ol start="4"><li><p>软链接</p><p>就是快捷键一个意思</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ls -s /usr/local/node-v14/bin/node /usr/local/bin/node # 添加软链<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ls -rf /usr/local/bin/node # 删除软链(如果不小心软链错了，先删除软链，再重新添加)<br></code></pre></div></td></tr></table></figure><ol start="5"><li>查看</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">node -v<br>npm -v<br></code></pre></div></td></tr></table></figure><ol start="6"><li><p>配置npm环境变量</p><p>将 <strong>/usr/local/node-v14/bin</strong> 目录添加到 $PATH 环境变量中可以方便地使用通过 npm 全局安装的第三方工具</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo &#x27;export PATH=/usr/local/node-v14/bin:$PATH&#x27; &gt;&gt; /etc/profile<br></code></pre></div></td></tr></table></figure><ol start="7"><li>生效环境变量</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">source /etc/profile<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="安装" scheme="https://brraida.github.io/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>nginx安装</title>
    <link href="https://brraida.github.io/posts/16fe430b/"/>
    <id>https://brraida.github.io/posts/16fe430b/</id>
    <published>2021-06-01T02:04:46.000Z</published>
    <updated>2021-09-02T05:47:42.230Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>该博文写于2021.6.1</p></blockquote><p>​    腾讯云，centos7.6，linux3.10.0-1160.11.1.el7.x86_64</p><p>​    尝试了几种方法，在失败与成功之中，选出与这种配置最快最适合的方法。愿你早日顺利入坑。</p><ul><li><p>升级yum源</p><blockquote><p>yum -y update  //升级所有包的同时，也升级软件和系统内核</p></blockquote></li></ul><p>我是将镜像重置后，上来就升级，忘记快照了。不过也无所谓啦。</p><ul><li><p>安装nginx（别名：engine X）</p><blockquote><p>yum -y install nginx</p></blockquote></li></ul><p>没想到就安装成功了，不需要换源不需要balabala，不放心可以去查看版本和配置文件</p><ol><li><p>查看nginx版本</p><blockquote><p>nginx -v</p></blockquote></li><li><p>配置文件路径</p><blockquote><p>默认的网站目录为： /usr/share/nginx/html</p><p>默认的配置文件为：/etc/nginx/nginx.conf</p><p>自定义配置文件目录为: /etc/nginx/conf.d/</p></blockquote></li><li><p>查找linux文件</p></li></ol><p>​        which ngixn   //会在环境变量$PATH设置的目录里查找符合条件的文件</p><p>​        whereis nginx //会在特定目录中查找符合条件的文件。这些文件应属于原始代码、二进制文件，或是帮助文件;只能用于查找二进制文件、源代码文件和man手册页，一般文件的定位需使用locate命令。</p><p>​        先关闭防火墙<strong>systemctl stop firewalld</strong>,然后启动它 <strong>systemctl start nginx</strong>,再在浏览器访问主机的ip地址，类似192.168.1.1，云服务器那个公网ip。</p><p><img src="/img/article/%E5%AE%89%E8%A3%85-nginx/nginx%E6%88%90%E5%8A%9F%E7%94%BB%E9%9D%A2.png"></p><p>​    可能使用Redhat安装nginx，所以显示界面和网上某些教程说显示nginx不一样。</p><p>​        </p><ul><li><p><strong>启动nginx</strong></p><blockquote><p>systemctl start nginx</p></blockquote></li><li><p><strong>停止nginx</strong></p><blockquote><p>systemctl stop nginx</p></blockquote></li><li><p><strong>重启nginx</strong></p><blockquote><p>systemctl restart nginx</p></blockquote></li><li><p><strong>查看nginx状态</strong></p><blockquote><p>systemctl status nginx</p></blockquote></li><li><p><strong>启用开机启动nginx</strong></p><blockquote><p>systemctl enable nginx</p></blockquote></li><li><p><strong>禁止开机启动nginx</strong></p><blockquote><p>systemctl disable nginx</p></blockquote></li><li><p><strong>检查配置文件</strong></p><blockquote><p>nginx -t    //要在配置好的文件的路径下运行次命令</p></blockquote></li><li><p><strong>重启nginx（更新配置文件）</strong></p><blockquote><p>service nginx reload</p></blockquote></li><li><p><strong>查看进程、PID等信息</strong></p><blockquote><p>lsof -i</p></blockquote></li><li><p><strong>查看进程占用端口号</strong></p><blockquote><p>lsof -i -P|grep nginx</p></blockquote></li><li><p><strong>使用端口号查询占用进程</strong></p><blockquote><p>losf -i</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="安装" scheme="https://brraida.github.io/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>nginx相关记录</title>
    <link href="https://brraida.github.io/posts/dbc31271/"/>
    <id>https://brraida.github.io/posts/dbc31271/</id>
    <published>2021-05-31T00:49:59.000Z</published>
    <updated>2021-09-02T05:47:42.186Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>该博文写于2021.5.31</p></blockquote><h2 id="nginx安装与部署"><a href="#nginx安装与部署" class="headerlink" title="nginx安装与部署"></a>nginx安装与部署</h2><p>​        本来想写nginx的安装，但是发现nginx的中文文档写得不错，然后会持续更新（这个太重要了）。也可以结合nginx的官方文档看。</p><p>​        偷个懒，放个链接好了：</p><ul><li><p>nginx中文文档：<a href="https://www.nginx.cn/">nginx</a></p></li><li><p>nginx官方文档：<a href="http://nginx.org/en/docs/">nginx documentation</a></p></li></ul><hr><h2 id="nginx概念"><a href="#nginx概念" class="headerlink" title="nginx概念"></a>nginx概念</h2><p>​        可能你和我一样，是用某个其他东西的时候用到nginx，但是却不知道这是个什么，能干什么，其特点是什么。我也是个小白，所以不敢误导。</p><p>​        贴几个我觉得讲得不错的链接：</p><ul><li><p><a href="https://juejin.cn/post/6844904129987526663#heading-16">连前端都看得懂的《Nginx 入门指南》 (juejin.cn)</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/34943332">8分钟带你深入浅出搞懂Nginx - 知乎 (zhihu.com)</a></p></li></ul><hr><h2 id="自己遇到的问题"><a href="#自己遇到的问题" class="headerlink" title="自己遇到的问题"></a>自己遇到的问题</h2><p>​        讲讲自己遇到的一些问题，因为之前不是按照中文文档安装的，按照网上的一些教程，然后发现自己找不到配置路径。现在懂了之后，感觉自己就挺搞的。</p><p>​        <strong>nginx.conf路径问题</strong>：</p><p>​        我用的是centos7.6。有一种方法是先安装开发库，然后yum换源，然后直接安装nginx。此时的nginx配置文件在etc目录下的nginx里。(这个最简单的方法，我没有成功，好气哦，说“没有niginx包提供”)<strong>cd /etc</strong> 即可以进入etc目录。另一种方法是下载安装包，解压到指定目录，一般都会解压到 <strong>/usr/local</strong> 里，此时就在和这个目录下的nginx中的conf目录下。</p><p>​        <strong>nginx.d问题</strong></p><p>​        可能你还会遇到让你在nginx.d下创建其他的*.conf文件进行清晰明了的管理配置。但是解压安装的nginx是没有nginx.d文件夹的，需要自己创建。</p><p>​        在你的nginx.conf的http块下加一句话：</p><blockquote><p>include /etc/nginx/conf.d/*.conf;</p></blockquote><p>​        这句话的意思是在关联etc下nginx下的conf.d目录文件，后面那个是配置文件。所以你可以在任意目录下建立这个conf.d目录文件，只要关联上就好了。不过，一般在etc或是解压的nginx文件下建立cong.d目录文件（个人观点。看到的各种教程都是建立在这些位置。nginx目录好理解，跟随性么，好找也好删除；之后查了etc目录作用，原来各种配置文件一般都是放在这里，那么这也就好理解了。）</p><p>​        然后只要重新加载配置文件就可以了</p><blockquote><p>service nginx reload</p></blockquote>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="nginx" scheme="https://brraida.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>杂记</title>
    <link href="https://brraida.github.io/posts/430d67de/"/>
    <id>https://brraida.github.io/posts/430d67de/</id>
    <published>2021-05-18T12:48:09.000Z</published>
    <updated>2021-09-02T05:47:42.243Z</updated>
    
    <content type="html"><![CDATA[<p>2021-5-17</p><hr><ul><li>花了我100多大洋买了个服务器，搞起来！</li><li>将项目移植到其他地方，改了半天的绝对路径。突然发现绝对路径的好处。</li></ul><p>2021-6-9</p><hr><ul><li><p>YAML是一个可读性高，用来表达数据序列化的格式。</p></li><li><p>XML是一种标记电子文件使其具有结构性的标记语言。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="咋咋嘴" scheme="https://brraida.github.io/tags/%E5%92%8B%E5%92%8B%E5%98%B4/"/>
    
  </entry>
  
  <entry>
    <title>编译原理1</title>
    <link href="https://brraida.github.io/posts/cc129669/"/>
    <id>https://brraida.github.io/posts/cc129669/</id>
    <published>2021-05-18T12:47:30.000Z</published>
    <updated>2021-09-02T05:47:42.240Z</updated>
    
    <content type="html"><![CDATA[<p>DFA与NFA的区别    </p><ul><li><p>这两个的主要最明显的区别就是DFA经过某一路径，到达另一个状态是确定的、唯一的。而NFA不是，而是可以到达一个或是多个状态的。也就是说，DFA是NFA的一种特例。</p></li><li><p>DFA的某一路径是的值是没有空串的。（那时候不知道这一点，在NFA进行确定化的时候，经空串也进行了计算，大失败！）</p></li></ul><p>有时候吧，想对答案的地方都没有，以后将编译原理的作业整理，丢上来。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="编译原理" scheme="https://brraida.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>py爆破</title>
    <link href="https://brraida.github.io/posts/3cc1efd6/"/>
    <id>https://brraida.github.io/posts/3cc1efd6/</id>
    <published>2021-05-18T09:27:08.000Z</published>
    <updated>2021-09-02T05:47:42.203Z</updated>
    
    <content type="html"><![CDATA[<p>​    有时候想白嫖一些资源，但是总会有些资源是压缩加密的。就因为这个，我对爆破很感兴趣。之后有学了python，所以就兴致冲冲地写了爆破脚本。记录一下遇到的问题和解决的方法。</p><p>​    首先，学信安的小伙伴和我讲有字典就简单，代码很简单的。所以我在github在找了如下的字典库。</p><blockquote><p><a href="https://github.com/YueYongDev/Blasting_dictionary">YueYongDev/Blasting_dictionary: 爆破字典 (github.com)</a></p></blockquote><p>​    之后cv网上代码，他用的是zipfile模块（python内置的模块）、rarfile模块(github大佬写的，接口和zipfile差不多)。然后出现问题。</p><h2 id="使用zipfile模块"><a href="#使用zipfile模块" class="headerlink" title="使用zipfile模块"></a>使用zipfile模块</h2><p>​    用zipfile不能解压不是用传统加密的文件。经过科学上网查询得到这样的解答与解决。</p><p><img src="/img/article/py-%E7%88%86%E7%A0%B4/zipfile%E4%B8%8D%E5%8F%AF%E7%94%A8%E8%A7%A3%E7%AD%94.jpg"></p><p>​    <strong>AES</strong>：密码学中的高级加密标准（Advanced Encryption Standard，AES），又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。</p><p>​    现在加密一般都是按这个标准。</p><h2 id="使用pyzipper模块"><a href="#使用pyzipper模块" class="headerlink" title="使用pyzipper模块"></a>使用pyzipper模块</h2><p>​    所以使用pyzipper模块代替zipfile模块。</p><p>​    给上可执行正确的代码：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pyzipper<br><br>f1 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;D:\\1\\pwd.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-keyword">with</span> pyzipper.AESZipFile(<span class="hljs-string">&#x27;D:\\1\\test.zip&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f1:<br>        i = i.rstrip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        f.pwd = <span class="hljs-built_in">str</span>.encode(i)<br>        <span class="hljs-keyword">try</span>:<br>            f.extractall(<span class="hljs-string">&#x27;D:\\1\\2&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The correct password is:&quot;</span> + i)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> Exception:<br>            <span class="hljs-keyword">pass</span><br>f1.close()<br></code></pre></div></td></tr></table></figure><h2 id="rarfile模块"><a href="#rarfile模块" class="headerlink" title="rarfile模块"></a>rarfile模块</h2><p>​    使用rarfile模块解压rar文件问题就多了。它解压其实借助的是电脑的解压软件的unrar.exe进行解压。(可以在pypi中查看此模块，可以得到此模块的相关信息与工作原理)</p><p>​    然后我嫌下载unrar太麻烦，还要配置环境变量等等操作，并且我本地用的是WinRAR，所以将WinRAR所在的路径加入环境就解决了。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> rarfile <br><br>path1 = <span class="hljs-string">&#x27;D:\\1\\2.rar&#x27;</span> <br>despath = <span class="hljs-string">&#x27;D:\\1\\2&#x27;</span>  <br><br>rf = rarfile.RarFile(path1)<br>rf.extractall(path=despath)<br>rf.close()<br></code></pre></div></td></tr></table></figure><p>​    经过测试，解压没有密码压缩的可以；解压加密的压缩包里面没有文件的可以。但是不可以解压加密的有文件的压缩包。编译错误显示下图所示：</p><p><img src="/img/article/py-%E7%88%86%E7%A0%B4/%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E6%98%BE%E7%A4%BA.png"></p><p>​    所以上rarfile这个项目查了一下，其他的使用者也遇到类似这样的问题。然后有人是这么解决的，如下图所示：</p><p><img src="/img/article/py-%E7%88%86%E7%A0%B4/%E6%8F%90%E9%97%AE%E8%80%85%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.png"></p><p>​    不过，这个14年提出来并解决的。我一个21年的，只能是借鉴参考了。看到后面，果然有个20年的朋友也有这样的问题。</p><p><img src="/img/article/py-%E7%88%86%E7%A0%B4/20%E5%B9%B4%E5%90%8C%E6%8F%90%E9%97%AE%E8%80%85.png"></p><p>​    所以大胆猜测，rarfile这个模块里面确实有些问题。</p><hr><p>​    同样的代码，我室友使用rarfile在他的电脑上跑出来了。</p><p>​    我是Windows10，python3.8.3，Pycharm，压缩软件WinRAR</p><p>​    室友用的是manjaro，python3.9.4，idle，压缩软件是系统自带的</p><hr><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>​    瞅我这暴脾气，最近考试月。考试月过了，我在搞一下。</p><ol><li>Windows下，下那个unrar，搞配置尝试</li><li>1不行就去CenOs7.4服务器搭个环境尝试</li><li>2不行我也开manjaro尝试</li><li>以上都失败，就可以砸电脑了</li></ol><p>搞成功地进一步设想。</p><ol><li>zip可以了，rar可以了，怎么可以不把它们整合在一起的道理呢。</li><li>爆破怎么可以不搞多线程呢。</li><li>python怎么可以不搞封装呢。</li><li>整个界面。</li></ol>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="python" scheme="https://brraida.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>py指令</title>
    <link href="https://brraida.github.io/posts/c669871/"/>
    <id>https://brraida.github.io/posts/c669871/</id>
    <published>2021-05-18T09:27:08.000Z</published>
    <updated>2021-09-02T05:47:42.200Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>在cmd窗口查看python</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">python --version<br></code></pre></div></td></tr></table></figure></li><li><p>查看安装模块或是库</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">pip list</span><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="python" scheme="https://brraida.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>word相关技巧</title>
    <link href="https://brraida.github.io/posts/a629f612/"/>
    <id>https://brraida.github.io/posts/a629f612/</id>
    <published>2021-05-12T02:03:46.000Z</published>
    <updated>2021-09-02T05:47:42.194Z</updated>
    
    <content type="html"><![CDATA[<p>​    最近和小组合作完成os课设，每个人写的项目不一样，所以最后各自文档合并的时候就不得不进行排版。下面是我为了完成某个目的的word技巧的记录。</p><p>我用的是word版本是<strong>office 2016</strong></p><h1 id="一次性选择同类内容"><a href="#一次性选择同类内容" class="headerlink" title="一次性选择同类内容"></a>一次性选择同类内容</h1><p>​    大家都写了一级标题、二级标题、正文等，但是合并的时候发现一级标题、二级标题、正文字体、字号不一样。然后想要统一。若是一个个格式刷是不切实际的，效率低下。那么如何快速选择全部同类的内容呢？</p><p>可以点击如下图所示的地方，也可以快捷键<strong>ctrl+shift+alt+s</strong></p><p><img src="/img/article/office-word/%E5%9B%BE1.png"></p><p>然后右侧会出现<strong>样式</strong>工具栏，点击你想修改的类型</p><p><img src="/img/article/office-word/%E5%9B%BE2.png"></p><hr><h1 id="修改图片格式"><a href="#修改图片格式" class="headerlink" title="修改图片格式"></a>修改图片格式</h1><p>​    为了防止文档在其他电脑时图片发生错位的情况，我们一般会选择嵌入型。但是我们选择嵌入型的时候，有些图片没有露出全部，只露出了一点点。</p><p>​    这是因为段落设置的问题，主要原因是行距设定成了固定值。</p><p>​    段落设置如图所示。</p><p><img src="/img/article/office-word/%E5%9B%BE3.png"></p><p>​    然后只要将这两个值修分别修改成无和单倍行距就可以了。</p><p><img src="/img/article/office-word/%E5%9B%BE4.png"></p><hr><h1 id="页眉"><a href="#页眉" class="headerlink" title="页眉"></a>页眉</h1><p>​    有些页不需要页眉或是不需要横线，如何删除。</p><p>​    单纯的单页删除是很容易操作，但是我现在的情况是，后20页都需要页眉，并且页眉都已经弄好了。唯独要删除这页的页眉。如何用样式删除，那么文档的全部页眉都会被删除，这是达不到我的要求的。</p><p>​    我的解决方法如下。</p><p>​    A页为要修改的页，B为A的下一页。</p><ol><li>双击页眉部分，进入修改页眉模式。</li><li>在要修改A页的下一页（即光标在B页），取消<strong>链接到前一节</strong>选项。</li></ol><p><img src="/img/article/office-word/%E5%9B%BE5.png"></p><ol start="3"><li>回到A页，选中文字，如图操作。</li></ol><p><img src="/img/article/office-word/%E5%9B%BE6.png"></p><ol start="4"><li>删除文字，双击文章地方，退出页眉模式。</li><li>over</li></ol>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="word" scheme="https://brraida.github.io/tags/word/"/>
    
  </entry>
  
  <entry>
    <title>linux用socket实现文件传输遇到的问题总结</title>
    <link href="https://brraida.github.io/posts/4f19d5af/"/>
    <id>https://brraida.github.io/posts/4f19d5af/</id>
    <published>2021-04-29T01:34:04.000Z</published>
    <updated>2021-09-02T05:47:42.183Z</updated>
    
    <content type="html"><![CDATA[<p>​    最近在写linux作业，要求是这样的：</p><ol><li><p>实现一个网络文件传输工具，可以使用文件和目录的传输；</p></li><li><p>增加共享目录，可以增加和删除共享的目录和文件，供网络查看；</p></li><li><p>可以查看对方共享目录和文件，并选择下载；</p></li><li><p>可以向对方传送文件和目录，并且该文件和目录会自动被对方共享。</p></li></ol><p>​    然后使用socket完成了在本地上文件的传输，之后想使用不同主机尝试传输，发现不行。开始了查找原因之旅，解决了之后mark一下。</p><p><strong>我使用的linux是centos8.1.1911-x86_64</strong></p><p><strong>室友的是ubuntu20.0.4</strong>(版本记不清了)</p><h4 id="可能造成的原因"><a href="#可能造成的原因" class="headerlink" title="可能造成的原因"></a>可能造成的原因</h4><ol><li><p>校园网</p></li><li><p>防火墙</p></li><li><p>NAT、网桥</p></li></ol><hr><h4 id="校园网"><a href="#校园网" class="headerlink" title="校园网"></a>校园网</h4><p>​    这个就比较神奇了，我先扎个坑，以后有机会在解释。同学说校园网不是局域网，要同一局域网下才行。这不是局域网震惊我一整年。查了一下校园网就是局域网，他想表达的意思应该是校园网内部是一块块的，所以你可能在这一块，而室友的电脑在那一块，导致不能连接。<strong>mark！！！</strong> 我是不太信的，我之后看清楚socket和校园网、局域网再说话。</p><p>​    先按他是对的来，进行了同一路由器下实验。结果是失败的。</p><hr><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><p>​    这个听了就比较合理，以前做计网实验的时候，就是因为防火墙而导致ping不通另一台主机。</p><p>​    关闭防火墙出现了问题，这里记录一下。我装了<strong>火绒</strong>，然后按照百度的方法，根本就关闭不了防火墙。（不行的方法就应该早点下架。。。）</p><p>​    <strong>可行的方法:</strong></p><ol><li>打开控制面板（windows+r，然后输入control）</li><li>点击系统和安全</li><li>点击Windows Defender防火墙</li><li>点击启动或关闭Windows Defender防火墙</li><li>关闭就可以了</li></ol><p><img src="/img/article/linux%E7%94%A8socket%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/firewall.png"></p><p>​    这样子后，我就成功地和室友ping通了。但是文件传输还是不行。之后听另一个室友讲，可能是NAT的问题。因为弄网桥麻烦，所以我都是直接NAT的。</p><hr><h4 id="NAT、桥接"><a href="#NAT、桥接" class="headerlink" title="NAT、桥接"></a>NAT、桥接</h4><p>​    <del>以后有时间在写NAT和桥接是啥，</del></p><blockquote><p> <a href="https://www.cnblogs.com/wzzkaifa/p/6806843.html">桥接模式和NAT模式差别 - wzzkaifa - 博客园 (cnblogs.com)</a></p><p>一句话，就是桥接可以让虚拟机在网络中像一台独立的主机，拥有ip地址,即拥有了通信能力。</p></blockquote><p>现在开始配置网桥。</p><blockquote><p>​    <a href="https://blog.csdn.net/qq_47354826/article/details/114888325">2021/3/16 “VMware虚拟机网络配置—桥接模式”_一切因为是码农-CSDN博客</a></p></blockquote><p>​    这位博主写的很详细，大致过程都没有问题。不过在配置的时候，有一处需要更正。在进行网卡配置的时候，写的是ifcfg-ens33文件，而这个是可读文件，常规的 <strong>!wq</strong> 命令是保存不了的。这时要使用</p><blockquote><p>w ! sudo tee %</p></blockquote><p>​    命令才可以写入。</p><p>​    最后终于和室友socket成功。</p><hr><h4 id="说些其他"><a href="#说些其他" class="headerlink" title="说些其他"></a>说些其他</h4><p>​    虚拟机是桥接模式下，必须与主机的网关一样，不然后果就是连不上外网。所以如果电脑这是连校园网，配置的是校园网的网关。待会连热点，就会不能访问外网。</p><p>​    我感觉是可以自动配置的，但是现在不想捯饬了，之后对linux感兴趣了，就补一下。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="linux" scheme="https://brraida.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Markdown基本语法</title>
    <link href="https://brraida.github.io/posts/5d36ff15/"/>
    <id>https://brraida.github.io/posts/5d36ff15/</id>
    <published>2021-04-16T07:58:52.000Z</published>
    <updated>2021-09-02T05:47:42.168Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown基本常用语法"><a href="#Markdown基本常用语法" class="headerlink" title="Markdown基本常用语法"></a>Markdown基本常用语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><ol><li>井号空格标题            <strong>一级标题</strong></li><li>井号井号空格标题    <strong>二级标题</strong></li><li>…以此类推，最多有六级标题</li></ol><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><ol><li>星号星号文字星号星号空格        <strong>加粗</strong></li><li>星号文字星号                               <em>斜体</em></li><li>星号星号星号文字星号星号星号 <em><strong>斜体加粗</strong></em></li></ol><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>​    大于号空格</p><blockquote><p>螃蟹在剥我的壳</p></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>​    三个星号空格</p><hr><p><strong>or</strong></p><p>​    三个短线(0旁边)空格</p><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>​    叹号左中括号图片名(随便取)右中括号括号，在括号里填本地图片的绝对路径or网络图片的地址</p><p><code>![]()</code></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>​     左中括号信息右中括号括号，括号里面填地址</p><p>[SunMonkey](<a href="https://brraida.github.io/">SunMonkey - 熬夜是不可的 (brraida.github.io)</a>)</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有次序列表"><a href="#有次序列表" class="headerlink" title="有次序列表"></a>有次序列表</h3><p>1.空格</p><ol><li>hello</li><li>hi</li></ol><hr><h3 id="无次序列表"><a href="#无次序列表" class="headerlink" title="无次序列表"></a>无次序列表</h3><p> -空格</p><ul><li>hello</li><li>hi</li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>​    建议右键插入，或是快捷键。用语法比较慢。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>​    tab键上方的点，输入三次，输入要写的编程语言(c,c++,python…)。之后就是写代码了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name=lee<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="Markdown" scheme="https://brraida.github.io/tags/Markdown/"/>
    
  </entry>
  
</feed>
